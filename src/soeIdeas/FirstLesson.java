package soeIdeas;

public class FirstLesson {

    // геттеры метод, предназначенный для доступа к полю класса (возвращет значение метода)
    // сеттер - для простановки свойств полей
    // добавляет абстракции для работы со значениями
    // геттер и сеттер нужен для большего контроля за данными (допускает валидакцию данных)
    // допускает исправление ошибок при вводе данных
    // самое главное: необходимы при заполнении изменяемых классов (то есть для заполения классов, где могут разные значения,
    // в том числе и противоречащие здравому сымслу и логике (как раз для избежания таких ситуаций)
    // защитное копирование (для безовапасноти при использовнии коллекций, при дополнении коллекций)
    // также геттер и сеттер нужны для изменений свойств приватных полей
    // могут быт иммутабельные классы (private final поля) нет наследовния и ненаследуемый - используются геттеры

    // toString - переопределение и перегрузка метода
    public String toString; // нужен для выведения строкового представления объекта (для выведения в консоль)
    /*
     самое главное правило общее: toString нужен, когда будет реализовываться консолный вывод
     либо если нужно понят, какой резутат будет у проброшенного exception
     по сути для вывода на печать применяется
     toString при выведении коллекции на печать (conCurrency) могуть быть ошибки

     бывает еще и перегрузка метода - например, когда метод с одним названием вызыввается несколько раз с разными параметрами
     @Override - говорит о том, что при перегрузке метода - все ок и так можно (метод должен имплементировт род класс, либо переопределяет
     его
     Защищает от ошибок при переопределении если случайно получилось перегрузит метод
     также позволяет перехватывать возможные exception

     контрукторы в java
     baeldung - один из лучших сервисов по java в виде мануалов
     метод, нужный для создания экземпляра при вывозе служебным словом new
     не декларироется возврат, потому что конструктор только инициализирует параметры
     сам также может имет параметры в т.ч. generic типа
     например, ArrayList<> - при иего использовнии должен быть использолван тип класса
     напрямую не вызыввется, а вызывается JVM при вызове new
     new - создает объек
     а контсруктоор - инициализирует
     */


}